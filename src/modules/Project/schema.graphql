"project type"
type Project {
  "the unique identifier, also used as the primary key"
  id: ID!
  "code associated with the project"
  code: String!
  "project's title"
  title: String!
  "quantity of the parts that must be processed"
  quantity: Int!
  "fee for each part"
  fee: Int
  "project's due date"
  dueDate: DateTime
  "description for this project"
  description: String

  "project's client"
  client: Client!

  createdAt: DateTime!
  updatedAt: DateTime!
}

extend type Client {
  "projects for this client"
  projects: [Project!]
}

extend type Query {
  "returns a project given its unique identifier"
  project(id: ID!): Project
  "returns a list of projects"
  projects: [Project!]!
}

"input fields to create a new project"
input ProjectInputCreate {
  "code associated with the project"
  code: String!
  "project's title"
  title: String!
  "quantity of the parts that must be processed"
  quantity: Int!
  "fee for each part"
  fee: Int
  "project's due date"
  dueDate: DateTime
  "description for this project"
  description: String

  "project's client's id"
  clientId: String!
}

"input fields to update an existing project"
input ProjectInputUpdate {
  "code associated with the project"
  code: String
  "project's title"
  title: String
  "quantity of the parts that must be processed"
  quantity: Int
  "fee for each part"
  fee: Int
  "project's due date"
  dueDate: DateTime
  "description for this project"
  description: String

  "project's client's id"
  clientId: String
}

extend type Mutation {
  "creates a new project"
  projectCreate(input: ProjectInputCreate!): MutationResponse!
  "updates an existing project"
  projectUpdate(id: ID!, input: ProjectInputUpdate!): MutationResponse!
  "deletes an project"
  projectDelete(id: ID!): MutationResponse!
}
