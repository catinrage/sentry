"a client is a person, a company or an organization"
type Client {
  "the unique identifier, also used as the primary key"
  id: ID!
  "the name of the client"
  name: String!

  createdAt: DateTime!
  updatedAt: DateTime!
}

extend type Project {
  "project's client"
  client: Client!
}

extend input ProjectInputCreate {
  "project's client's id"
  clientId: String!
}

extend input ProjectInputUpdate {
  "project's new client's id"
  clientId: String
}

extend type Query {
  "returns a client given its unique identifier"
  client(id: ID!): Client
  "returns a list of clients"
  clients: [Client!]!
}

"input fields to create a new client"
input ClientInputCreate {
  "the name of the client"
  name: String!
}

"input fields to update an existing client"
input ClientInputUpdate {
  "the name of the client"
  name: String
}

extend type Mutation {
  "creates a new client"
  clientCreate(input: ClientInputCreate!): MutationResponse!
  "updates an existing client"
  clientUpdate(id: ID!, input: ClientInputUpdate!): MutationResponse!
  "deletes an client"
  clientDelete(id: ID!): MutationResponse!
}
