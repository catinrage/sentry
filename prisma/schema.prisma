// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// cnc machine shop project management system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id   String @id @default(cuid())
  name String @unique

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Machine {
  id        String          @id @default(cuid())
  name      String          @unique
  type      MachineTypeEnum @default(CNC_MILLING)
  available Boolean         @default(true)

  schedules ProjectStageSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id       String    @id @default(cuid())
  code     String    @unique
  title    String
  clientId String
  quantity Int
  fee      Int?
  dueDate  DateTime?

  client Client         @relation(fields: [clientId], references: [id], onDelete: Restrict)
  stages ProjectStage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, title])
}

model ProjectStageScheduleMetadata {
  id String @id @default(cuid())

  durationSetup       Int   @default(-1)
  durationPreparation Int   @default(-1)
  durationCycle       Int   @default(-1)
  numberOfOutputParts Int   @default(-1)
  numberOfSetups      Int   @default(-1)
  efficiencyEstimated Float @default(-1)

  projectStageId         String? @unique
  projectStageScheduleId String? @unique

  ProjectStage         ProjectStage?         @relation(fields: [projectStageId], references: [id], onDelete: Cascade)
  ProjectStageSchedule ProjectStageSchedule? @relation(fields: [projectStageScheduleId], references: [id], onDelete: Cascade)
}

model ProjectStage {
  id        String  @id @default(cuid())
  order     Int     @default(1)
  title     String?
  projectId String

  defaultMetadata ProjectStageScheduleMetadata?
  project         Project                       @relation(fields: [projectId], references: [id], onDelete: Restrict)
  schedules       ProjectStageSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectStageSchedule {
  id         String                @id @default(cuid())
  stageId    String
  dateStart  DateTime?
  dateEnd    DateTime
  quantity   Int
  state      ProjectStageStateEnum @default(PENDING)
  previousId String                @unique
  machineId  String

  machine       Machine                            @relation(fields: [machineId], references: [id], onDelete: Restrict)
  metadata      ProjectStageScheduleMetadata?
  previous      ProjectStageSchedule?              @relation(name: "chain", fields: [previousId], references: [id], onDelete: SetDefault)
  next          ProjectStageSchedule?              @relation(name: "chain")
  interruptions ProjectStageScheduleInterruption[]
  stage         ProjectStage                       @relation(fields: [stageId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectStageScheduleInterruption {
  id String @id @default(cuid())

  reason     String
  scheduleId String
  dateStart  DateTime
  dateEnd    DateTime

  schedule ProjectStageSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

enum ProjectStageStateEnum {
  PENDING
  IN_PROGRESS
  PAUSED
  COMPLETED
}

enum MachineTypeEnum {
  CNC_MILLING
  CNC_TURNING
  CNC_WIRECUT
}
